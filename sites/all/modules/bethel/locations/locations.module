<?php

/**
 * Implements hook_menu().
 */
function locations_menu() {
  // Location specific settings.
  $items['admin/config/bethel/locations'] = array(
    'title' => 'Locations',
    'description' => 'Select the campus location to associate with this domain.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('locations_admin'),
    'access arguments' => array('administer bethel settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

function locations_admin() {
  $form = array();
  
  $form['campus_location'] = array(
    '#type' => 'select',
    '#title' => t('Campus Location'),
    '#options' => _bethel_locations_all(),
    '#default_value' => variable_get('campus_location', '')
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_info().
 */
function locations_field_info() {
  return array(
    'bethel_locations' => array(
      'label' => t('Location'),
      'description' => t('Location input with Bethel integration.'),
      'default_widget' => 'bethel_location_widget',
      'default_formatter' => 'bethel_location_text',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function locations_field_is_empty($item, $field) {
  return empty($item['address']) && empty($item['bethel_id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function locations_field_formatter_info() {
  return array(
    'bethel_location_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('bethel_locations'),
    ),
    'bethel_location_latitude' => array(
      'label' => t('Latitude text-based formatter'),
      'field types' => array('bethel_locations'),
    ),
    'bethel_location_longitude' => array(
      'label' => t('Longitude text-based formatter'),
      'field types' => array('bethel_locations'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function locations_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
  
    $item = _bethel_locations_process($item);
  
    switch ($display['type']) {
  
      case 'bethel_location_text':
        $element[$delta]['#markup'] = '<p>' . $item['address'] . '</p>';
        break;
      case 'bethel_location_latitude':
        $element[$delta]['#markup'] = $item['lat'];
        break;
      case 'bethel_location_longitude':
        $element[$delta]['#markup'] = $item['lon'];
        break;
    }
  
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function locations_field_widget_info() {
  return array(
    'bethel_location_widget' => array(
      'label' => t('Bethel Widget'),
      'field types' => array('bethel_locations'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function locations_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {

    case 'bethel_location_widget':
      $element['address'] = array(
        '#title' => $element['#title'],
        '#type' => 'textfield',
        '#default_value' => (isset($items[$delta]['address']) && !$items[$delta]['bethel_id']) ? $items[$delta]['address'] : '',
        '#attributes' => array('placeholder' => 'Enter an address or choose a location to the right.', 'id' => array('location-autocomplete')),
      );
      $element['bethel_id'] = array(
        '#type' => 'select',
        '#options' => array_merge(_bethel_locations_all(array('AUTO' => 'Automatic'))),
        '#default_value' => isset($items[$delta]['bethel_id']) ? $items[$delta]['bethel_id'] : '',
      );
      $element['lat'] = array(
        '#type' => 'hidden',
        '#default_value' => isset($items[$delta]['lat']) ? $items[$delta]['lat'] : '0',
        '#attributes' => array('class' => array('field-lat')),
      );
      $element['lon'] = array(
        '#type' => 'hidden',
        '#default_value' => isset($items[$delta]['lon']) ? $items[$delta]['lon'] : '0',
        '#attributes' => array('class' => array('field-lon')),
      );
      break;

  }
  
  $element['#attached']['css'][] = drupal_get_path('module', 'locations') . '/locations.field.css';
  $element['#attached']['js'] = array(
    array(
      'data' => '//maps.googleapis.com/maps/api/js?libraries=places&sensor=false',
      'type' => 'external',
    ),
    array(
      'data' => drupal_get_path('module', 'locations') . '/locations.field.js',
      'type' => 'file',
      'scope' => 'footer',
    ),
  );

  return $element;
}

/**
 * Implements hook_block_info().
 */
function locations_block_info() {
  $blocks['campus-locations'] = array(
    'info' => t('Campus Location'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['event-locations'] = array(
    'info' => t('Event Location'), 
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/*
 * Implementation of hook_theme().
 */
function locations_theme() {
  return array(
    'campus_block' => array(
      'arguments' => array(),
      'template' => 'bethel-campus-block',
      'variables' => array(
        'map' => NULL,
        'location' => NULL
      )
    )
  );
}

/**
 * Implements hook_block_view().
 */
function locations_block_view($delta = '') {
  $map = leaflet_map_get_info('OSM Mapnik');
  $map['settings']['maxZoom'] = 15;
  $map['settings']['scrollWheelZoom'] = false;
  $block['subject'] = NULL;

  switch ($delta) {

    case 'event-locations':
      if (arg(1)) {
        $result = db_query('SELECT l.field_where_bethel_id bethel_id, l.field_where_address address, l.field_where_lat lat, l.field_where_lon lon FROM {field_data_field_where} l WHERE l.entity_id = :nid', array(':nid' => arg(1)));
        foreach ($result as $record) {
          $location = _bethel_locations_process(array(
            'bethel_id' => $record->bethel_id,
            'address' => $record->address,
            'lat' => $record->lat,
            'lon' => $record->lon
          ));
          $map['center'] = array('lat' => $location['lat'], 'lon' => $location['lon']);
          $features = array(
            array(
              'type' => 'point',
              'lon' => $location['lon'],
              'lat' => $location['lat'],
            ),
          );
        }
        if (!empty($features)) {
          $block['content'] = leaflet_render_map($map, $features, '300px');
          $block['content'] .= '<div class="location-address"><a href="http://maps.google.com/?q=' . $location['address'] . '" target="_blank">' . implode(', ', explode(', ', $location['address'], -2)) . '</a></div>';
        }
      }
    break;

    case 'campus-locations':
      $location = _bethel_api_query('location/show/' . variable_get('campus_location'));

      $map['center'] = array('lat' => $location->loc[1], 'lon' => $location->loc[0]);
      $features = array(
        array(
          'type' => 'point',
          'lon' => $location->loc[0],
          'lat' => $location->loc[1],
          'leaflet_id' => $location->id,
        ),
      );
      $block['content'] = theme('campus_block', array('map' => leaflet_render_map($map, $features, '300px'), 'location' => $location));
    break;

  }
  
  return $block;
}

function _bethel_locations_process($item) {
  if ($item['bethel_id']) {
    $location_id = ($item['bethel_id'] == 'AUTO') ? variable_get('campus_location') : $item['bethel_id'];
    $location = _bethel_api_query('location/show/' . $location_id);     
    $item['address'] = $location->address;
    $item['lat'] = $location->loc[1];
    $item['lon'] = $location->loc[0];
  }
  
  return $item;
}

function _bethel_locations_all($extras = array()) {
  $bethel_key = variable_get('bethel_key', NULL);
  $locations_all = array_merge(array(''), $extras);
  
  if ($bethel_key) {
    $locations = _bethel_api_query('location/ministry/' . $bethel_key);

    foreach ($locations as $location) {
      $locations_all[$location->id] = $location->name;
    }
  }
  
  return $locations_all;
}
