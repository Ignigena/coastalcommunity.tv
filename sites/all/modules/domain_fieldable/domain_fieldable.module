<?php

/**
 * @file
 * Domain Fieldable module file.
 */

/**
 * Implements hook_entity_info().
 */
function domain_fieldable_entity_info() {
  $return = array(
    'domain_fieldable' => array(
      'label' => t('Domain', array(), array('context' => 'a domain')),
      'controller class' => 'DomainFieldableController',
      'base table' => 'domain',
      'load hook' => 'domain_fieldable_load',
      'uri callback' => 'entityform_uri',
      'label callback' => 'entity_class_label',
      'entity token' => 'domain_fieldable',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'domain_id',
      ),
      'bundles' => array(
        'domain_fieldable' => array(
          'label' => t('Domain', array(), array('context' => 'a domain')),
          'admin' => array(
            'path' => 'admin/structure/domain',
            'real path' => 'admin/structure/domain',
            'access arguments' => array('administer domains'),
          ),
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_menu().
 */
function domain_fieldable_menu() {

  $items['admin/structure/domain/view/%domain_fieldable/fields'] = array(
    'title' => 'Fields',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer domains'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_fieldable_edit_form', 4),
  );
  
  return $items;
}

function domain_fieldable_new($type = 'domain_fieldable') {

  return entity_get_controller('domain_fieldable')->create(array(
    'type' => $type,
  ));
}

function domain_fieldable_save($domain_fieldable) {
  return entity_get_controller('domain_fieldable')->save($domain_fieldable);
}

function domain_fieldable_load($id, $reset = FALSE) {
  $domain_fieldables = domain_fieldable_load_multiple(array($id), array(), $reset);
  return reset($domain_fieldables);
}

function domain_fieldable_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('domain_fieldable', $ids, $conditions, $reset);
}

function domain_fieldable_edit_form($form, &$form_state, $domain_fieldable) {
  
  $form['data']['#tree'] = TRUE;
  
  $form_state['domain_fieldable'] = $domain_fieldable;
  
  field_attach_form('domain_fieldable', $domain_fieldable, $form, $form_state);

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );
 
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => $submit + array('domain_fieldable_edit_form_submit'),
  );
  
  $form['#validate'][] = 'domain_fieldable_edit_form_validate';

  return $form;
}

function domain_fieldable_edit_form_validate(&$form, &$form_state) {
  entity_form_field_validate('domain_fieldable', $form, $form_state);
}

function domain_fieldable_edit_form_submit(&$form, &$form_state) {
  
  $domain_fieldable = $form_state['domain_fieldable'];
  
  if ($domain_fieldable->is_new = isset($domain_fieldable->is_new) ? $domain_fieldable->is_new : 0) {
    $domain_fieldable->created = time();
  }
  
  $domain_fieldable->changed = time();

  form_state_values_clean($form_state);

  entity_form_submit_build_entity('domain_fieldable', $domain_fieldable, $form, $form_state);

  $domain_fieldable->is_new = false;
  domain_fieldable_save($domain_fieldable);
}

function domain_fieldable_form_domain_form_alter(&$form, &$form_state, $form_id) {
  if(empty($form['domain_id']['#value'])) {
    $domain_fieldable = domain_fieldable_new();
  } else {
    $domain_fieldable = domain_fieldable_load($form['domain_id']['#value']);
  }
  $langcode = entity_language('domain_fieldable', $domain_fieldable);
  field_attach_form('domain_fieldable', $domain_fieldable, $form, $form_state, $langcode);
  foreach (field_info_instances('domain_fieldable', 'domain_fieldable') as $field_name => $instance) {
    if (empty($instance['settings']['domain_form'])) {
      $form[$field_name]['#access'] = FALSE;
    }
  }
  $form['data']['#tree'] = TRUE;
  $form_state['domain_fieldable'] = $domain_fieldable;
  $form['submit']['#weight'] = 50;
  $form['#validate'][] = 'domain_fieldable_edit_form_validate';
  $form['#submit'][] = 'domain_fieldable_edit_form_submit';
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkbox for the 'domain_form' instance settings on the 'Edit
 * field instance' form.
 */
function domain_fieldable_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $instance = $form['#instance'];

  if ($instance['entity_type'] == 'domain_fieldable' && !$form['#field']['locked']) {

    $form['instance']['settings']['domain_form'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display on domain edit form.'),
      '#description' => t("This is compulsory for 'required' fields."),
      // Field instances created in D7 beta releases before the setting was
      // introduced might be set as 'required' and 'not shown on domain_form
      // form'. We make sure the checkbox comes as 'checked' for those.
      '#default_value' => (isset($instance['settings']['domain_form'])  && $instance['settings']['domain_form']) || $instance['required'],
      // Display just below the 'required' checkbox.
      '#weight' => $form['instance']['required']['#weight'] + .1,
      // Disabled when the 'required' checkbox is checked.
      '#states' => array(
        'enabled' => array('input[name="instance[required]"]' => array('checked' => FALSE)),
        'checked' => array('input[name="instance[required]"]' => array('checked' => TRUE)),
      ),

    );
    array_unshift($form['#submit'], 'domain_fieldable_form_field_ui_field_edit_form_submit');
  }
}

/**
 * Additional submit handler for the 'Edit field instance' form.
 *
 * Make sure the 'domain_form' setting is set for required fields.
 */
function domain_fieldable_form_field_ui_field_edit_form_submit($form, &$form_state) {
  $instance = $form_state['values']['instance'];

  if (!empty($instance['required'])) {
    form_set_value($form['instance']['settings']['domain_form'], 1, $form_state);
  }
}