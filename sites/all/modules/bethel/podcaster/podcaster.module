<?php

/**
 * Implements hook_menu().
 */
function podcaster_menu() {
  // Autocomplete widget to link Podcast media to entity.
  $items['bethel/podcaster/autocomplete'] = array(
    'page callback' => '_podcaster_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Settings for what node types show up in autocomplete form.
  $items['admin/config/bethel/podcaster'] = array(
    'title' => 'Podcaster',
    'description' => 'Select which node types show up when linking to Podcaster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('podcaster_admin'),
    'access arguments' => array('administer podcaster settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Implements hook_permission().
 */
function podcaster_permission() {
  $permissions = array(
    'administer podcaster settings' => array(
      'title' => t('Administer Podcaster settings'),
    ),
  );
  return $permissions;
}

function podcaster_admin() {
  $form = array();
  $node_types = node_type_get_types();
  $site_nodetypes = array();

  foreach ($node_types as $type) {
    $site_nodetypes[$type->type] = $type->name;
  }

  $form['podcaster_nodetypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled node types'),
    '#options' => $site_nodetypes,
    '#default_value' => variable_get('podcaster_nodetypes', array()),
    '#description' => t("Only node types checked above will be available for autocomplete in Podcaster."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Generates a JSON list of autocomplete matches for an entity.
 *
 * @param string $string
 *   The text entered, for which matching entities are sought.
 */
function _podcaster_autocomplete($string = '') {
  $matches = array();

  $return = db_select('node', 'n')
    ->fields('n', array('title', 'nid', 'type'))
    ->condition('n.title', '%' . db_like($string) . '%', 'LIKE');

  foreach (variable_get('podcaster_nodetypes', array()) as $condition) {
    if ($condition)
      $return->condition('n.type', $condition, '=');
  }

  $return = $return->execute();

  foreach ($return as $row) {
    $matches[] = $row->title . ' [id:' . $row->nid . ']';
  }

  header('Access-Control-Allow-Origin: *');
  $matches = array('results' => $matches);
  drupal_json_output($matches);
}

/**
 * Implements hook_block_info().
 */
function podcaster_block_info() {
  $blocks['audio-player'] = array(
    'info' => t('Podcaster: Audio Player'), 
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function podcaster_block_view($delta = '') {
  $block['subject'] = t('Audio Player');
  
  if (arg(1)) {
    $node = arg(1);
    $playlist = array();

    $associated = _bethel_api_query('podcastmedia/related/' . $node);

    foreach ($associated as $media) {
      $playlist[] = array(
        'filename' => $media->name,
        'url' => $media->url,
      );
    }
    if (count($playlist) >= 1) {
      $block['content'] = theme('jplayer', array(
        'entity_type' => 'node',
        'entity' => node_load($node),
        'field_name' => 'podcaster',
        'items' => $playlist,
        'settings' => array(
          'autoplay' => 0,
          'continuous' => 0,
          'solution' => 'html, flash',
          'preload' => 'metadata',
          'volume' => 80,
          'muted' => FALSE,
          'repeat' => 'none',
          'backgroundColor' => '000000',
          'mode' => 'playlist',
        ),
      ));
    }
  }

  return $block;
}
